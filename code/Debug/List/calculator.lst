
AVRASM ver. 2.1.30  C:\Users\HADI\Desktop\MicroProject_99463143\calculator\code\Debug\List\calculator.asm Wed Feb 01 09:00:54 2023

C:\Users\HADI\Desktop\MicroProject_99463143\calculator\code\Debug\List\calculator.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\HADI\Desktop\MicroProject_99463143\calculator\code\Debug\List\calculator.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\HADI\Desktop\MicroProject_99463143\calculator\code\Debug\List\calculator.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\HADI\Desktop\MicroProject_99463143\calculator\code\Debug\List\calculator.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _operator=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0043 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G103:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G103:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6425
C:\Users\HADI\Desktop\MicroProject_99463143\calculator\code\Debug\List\calculator.asm(1129): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x25,0x64,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\HADI\Desktop\MicroProject_99463143\calculator\code\Debug\List\calculator.asm(1133): warning: .cseg .db misalignment - padding zero byte
000036 0001      	.DB  0x1
                 _0x2020000:
000037 4e2d
000038 4e41
000039 4900
00003a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\HADI\Desktop\MicroProject_99463143\calculator\code\Debug\List\calculator.asm(1136): warning: .cseg .db misalignment - padding zero byte
00003b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003c 0002      	.DW  0x02
00003d 0268      	.DW  __base_y_G100
00003e 006a      	.DW  _0x2000003*2
                 
00003f 0001      	.DW  0x01
000040 026c      	.DW  __seed_G101
000041 006c      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bffb      	OUT  GICR,R31
000048 bfeb      	OUT  GICR,R30
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e7e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e 940c 0185 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <math.h>
                 ;#include <stdio.h>
                 ;
                 ;long int first_operand;
                 ;long int second_operand;
                 ;char operator;
                 ;
                 ;int check_button(void){
                 ; 0000 000C int check_button(void){
                 
                 	.CSEG
                 _check_button:
                 ; .FSTART _check_button
                 ; 0000 000D 
                 ; 0000 000E     PORTD.4=0;
000070 9894      	CBI  0x12,4
                 ; 0000 000F     PORTD.5=0;
000071 9895      	CBI  0x12,5
                 ; 0000 0010     PORTD.6=0;
000072 9896      	CBI  0x12,6
                 ; 0000 0011     PORTD.7=0;
000073 9897      	CBI  0x12,7
                 ; 0000 0012     delay_ms(500);
000074 efa4      	LDI  R26,LOW(500)
000075 e0b1      	LDI  R27,HIGH(500)
000076 940e 0464 	CALL _delay_ms
                 ; 0000 0013 
                 ; 0000 0014     while(1){
                 _0xB:
                 ; 0000 0015 
                 ; 0000 0016         PORTD.4=1;
000078 9a94      	SBI  0x12,4
                 ; 0000 0017         if(PIND.0==1)return 7;
000079 9b80      	SBIS 0x10,0
00007a c003      	RJMP _0x10
00007b e0e7      	LDI  R30,LOW(7)
00007c e0f0      	LDI  R31,HIGH(7)
00007d 9508      	RET
                 ; 0000 0018         if(PIND.1==1)return 4;
                 _0x10:
00007e 9b81      	SBIS 0x10,1
00007f c003      	RJMP _0x11
000080 e0e4      	LDI  R30,LOW(4)
000081 e0f0      	LDI  R31,HIGH(4)
000082 9508      	RET
                 ; 0000 0019         if(PIND.2==1)return 1;
                 _0x11:
000083 9b82      	SBIS 0x10,2
000084 c003      	RJMP _0x12
000085 e0e1      	LDI  R30,LOW(1)
000086 e0f0      	LDI  R31,HIGH(1)
000087 9508      	RET
                 ; 0000 001A         if(PIND.3==1)return 10;//on/c
                 _0x12:
000088 9b83      	SBIS 0x10,3
000089 c003      	RJMP _0x13
00008a e0ea      	LDI  R30,LOW(10)
00008b e0f0      	LDI  R31,HIGH(10)
00008c 9508      	RET
                 ; 0000 001B         PORTD.4=0;
                 _0x13:
00008d 9894      	CBI  0x12,4
                 ; 0000 001C 
                 ; 0000 001D         PORTD.5=1;
00008e 9a95      	SBI  0x12,5
                 ; 0000 001E         if(PIND.0==1)return 8;
00008f 9b80      	SBIS 0x10,0
000090 c003      	RJMP _0x18
000091 e0e8      	LDI  R30,LOW(8)
000092 e0f0      	LDI  R31,HIGH(8)
000093 9508      	RET
                 ; 0000 001F         if(PIND.1==1)return 5;
                 _0x18:
000094 9b81      	SBIS 0x10,1
000095 c003      	RJMP _0x19
000096 e0e5      	LDI  R30,LOW(5)
000097 e0f0      	LDI  R31,HIGH(5)
000098 9508      	RET
                 ; 0000 0020         if(PIND.2==1)return 2;
                 _0x19:
000099 9b82      	SBIS 0x10,2
00009a c003      	RJMP _0x1A
00009b e0e2      	LDI  R30,LOW(2)
00009c e0f0      	LDI  R31,HIGH(2)
00009d 9508      	RET
                 ; 0000 0021         if(PIND.3==1)return 0;
                 _0x1A:
00009e 9b83      	SBIS 0x10,3
00009f c003      	RJMP _0x1B
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 e0f0      	LDI  R31,HIGH(0)
0000a2 9508      	RET
                 ; 0000 0022         PORTD.5=0;
                 _0x1B:
0000a3 9895      	CBI  0x12,5
                 ; 0000 0023 
                 ; 0000 0024         PORTD.6=1;
0000a4 9a96      	SBI  0x12,6
                 ; 0000 0025         if(PIND.0==1)return 9;
0000a5 9b80      	SBIS 0x10,0
0000a6 c003      	RJMP _0x20
0000a7 e0e9      	LDI  R30,LOW(9)
0000a8 e0f0      	LDI  R31,HIGH(9)
0000a9 9508      	RET
                 ; 0000 0026         if(PIND.1==1)return 6;
                 _0x20:
0000aa 9b81      	SBIS 0x10,1
0000ab c003      	RJMP _0x21
0000ac e0e6      	LDI  R30,LOW(6)
0000ad e0f0      	LDI  R31,HIGH(6)
0000ae 9508      	RET
                 ; 0000 0027         if(PIND.2==1)return 3;
                 _0x21:
0000af 9b82      	SBIS 0x10,2
0000b0 c003      	RJMP _0x22
0000b1 e0e3      	LDI  R30,LOW(3)
0000b2 e0f0      	LDI  R31,HIGH(3)
0000b3 9508      	RET
                 ; 0000 0028         if(PIND.3==1)return 11;
                 _0x22:
0000b4 9b83      	SBIS 0x10,3
0000b5 c003      	RJMP _0x23
0000b6 e0eb      	LDI  R30,LOW(11)
0000b7 e0f0      	LDI  R31,HIGH(11)
0000b8 9508      	RET
                 ; 0000 0029         PORTD.6=0;
                 _0x23:
0000b9 9896      	CBI  0x12,6
                 ; 0000 002A 
                 ; 0000 002B         PORTD.7=1;
0000ba 9a97      	SBI  0x12,7
                 ; 0000 002C         if(PIND.0==1)return 12;
0000bb 9b80      	SBIS 0x10,0
0000bc c003      	RJMP _0x28
0000bd e0ec      	LDI  R30,LOW(12)
0000be e0f0      	LDI  R31,HIGH(12)
0000bf 9508      	RET
                 ; 0000 002D         if(PIND.1==1)return 13;
                 _0x28:
0000c0 9b81      	SBIS 0x10,1
0000c1 c003      	RJMP _0x29
0000c2 e0ed      	LDI  R30,LOW(13)
0000c3 e0f0      	LDI  R31,HIGH(13)
0000c4 9508      	RET
                 ; 0000 002E         if(PIND.2==1)return 14;
                 _0x29:
0000c5 9b82      	SBIS 0x10,2
0000c6 c003      	RJMP _0x2A
0000c7 e0ee      	LDI  R30,LOW(14)
0000c8 e0f0      	LDI  R31,HIGH(14)
0000c9 9508      	RET
                 ; 0000 002F         if(PIND.3==1)return 15;
                 _0x2A:
0000ca 9b83      	SBIS 0x10,3
0000cb c003      	RJMP _0x2B
0000cc e0ef      	LDI  R30,LOW(15)
0000cd e0f0      	LDI  R31,HIGH(15)
0000ce 9508      	RET
                 ; 0000 0030         PORTD.7=0;
                 _0x2B:
0000cf 9897      	CBI  0x12,7
                 ; 0000 0031     }
0000d0 cfa7      	RJMP _0xB
                 ; 0000 0032 }
                 ; .FEND
                 ;
                 ;
                 ; void show_input(int button){
                 ; 0000 0035 void show_input(int button){
                 _show_input:
                 ; .FSTART _show_input
                 ; 0000 0036       char c ='';
                 ; 0000 0037        if(button<=9 && button >=0) {
0000d1 93ba      	ST   -Y,R27
0000d2 93aa      	ST   -Y,R26
0000d3 931a      	ST   -Y,R17
                 ;	button -> Y+1
                 ;	c -> R17
0000d4 e010      	LDI  R17,0
0000d5 81a9      	LDD  R26,Y+1
0000d6 81ba      	LDD  R27,Y+1+1
0000d7 971a      	SBIW R26,10
0000d8 f41c      	BRGE _0x2F
0000d9 81aa      	LDD  R26,Y+2
0000da 23aa      	TST  R26
0000db f40a      	BRPL _0x30
                 _0x2F:
0000dc c020      	RJMP _0x2E
                 _0x30:
                 ; 0000 0038             c=button+'0';
0000dd 81e9      	LDD  R30,Y+1
0000de 5de0      	SUBI R30,-LOW(48)
0000df 2f1e      	MOV  R17,R30
                 ; 0000 0039 
                 ; 0000 003A             if(operator == '0') {
0000e0 e3e0      	LDI  R30,LOW(48)
0000e1 15e5      	CP   R30,R5
0000e2 f469      	BRNE _0x31
                 ; 0000 003B                 first_operand = first_operand * 10 + button;
0000e3 940e 0400 	CALL SUBOPT_0x0
0000e5 940e 0409 	CALL SUBOPT_0x1
0000e7 93e0 0260 	STS  _first_operand,R30
0000e9 93f0 0261 	STS  _first_operand+1,R31
0000eb 9360 0262 	STS  _first_operand+2,R22
0000ed 9370 0263 	STS  _first_operand+3,R23
                 ; 0000 003C             }else {
0000ef c00c      	RJMP _0x32
                 _0x31:
                 ; 0000 003D                 second_operand = second_operand * 10 + button;
0000f0 940e 0418 	CALL SUBOPT_0x2
0000f2 940e 0409 	CALL SUBOPT_0x1
0000f4 93e0 0264 	STS  _second_operand,R30
0000f6 93f0 0265 	STS  _second_operand+1,R31
0000f8 9360 0266 	STS  _second_operand+2,R22
0000fa 9370 0267 	STS  _second_operand+3,R23
                 ; 0000 003E             }
                 _0x32:
                 ; 0000 003F        } else if(operator == '0'){
0000fc c01b      	RJMP _0x33
                 _0x2E:
0000fd e3e0      	LDI  R30,LOW(48)
0000fe 15e5      	CP   R30,R5
0000ff f4c1      	BRNE _0x34
                 ; 0000 0040             if(button ==12)
000100 81a9      	LDD  R26,Y+1
000101 81ba      	LDD  R27,Y+1+1
000102 971c      	SBIW R26,12
000103 f411      	BRNE _0x35
                 ; 0000 0041                 c='/';
000104 e21f      	LDI  R17,LOW(47)
                 ; 0000 0042            else if(button ==13)
000105 c011      	RJMP _0x36
                 _0x35:
000106 81a9      	LDD  R26,Y+1
000107 81ba      	LDD  R27,Y+1+1
000108 971d      	SBIW R26,13
000109 f411      	BRNE _0x37
                 ; 0000 0043                 c='*';
00010a e21a      	LDI  R17,LOW(42)
                 ; 0000 0044            else if(button ==14)
00010b c00b      	RJMP _0x38
                 _0x37:
00010c 81a9      	LDD  R26,Y+1
00010d 81ba      	LDD  R27,Y+1+1
00010e 971e      	SBIW R26,14
00010f f411      	BRNE _0x39
                 ; 0000 0045                 c='-';
000110 e21d      	LDI  R17,LOW(45)
                 ; 0000 0046            else if(button ==15)
000111 c005      	RJMP _0x3A
                 _0x39:
000112 81a9      	LDD  R26,Y+1
000113 81ba      	LDD  R27,Y+1+1
000114 971f      	SBIW R26,15
000115 f409      	BRNE _0x3B
                 ; 0000 0047                 c='+';
000116 e21b      	LDI  R17,LOW(43)
                 ; 0000 0048 
                 ; 0000 0049            operator = c;
                 _0x3B:
                 _0x3A:
                 _0x38:
                 _0x36:
000117 2e51      	MOV  R5,R17
                 ; 0000 004A        }
                 ; 0000 004B 
                 ; 0000 004C        if(c != '')
                 _0x34:
                 _0x33:
000118 3010      	CPI  R17,0
000119 f011      	BREQ _0x3C
                 ; 0000 004D             lcd_putchar(c);
00011a 2fa1      	MOV  R26,R17
00011b d0d0      	RCALL _lcd_putchar
                 ; 0000 004E  }
                 _0x3C:
00011c c0f2      	RJMP _0x20C0003
                 ; .FEND
                 ;
                 ; long  int  calculate_result(){
                 ; 0000 0050 long  int  calculate_result(){
                 _calculate_result:
                 ; .FSTART _calculate_result
                 ; 0000 0051     switch(operator) {
00011d 2de5      	MOV  R30,R5
00011e e0f0      	LDI  R31,0
                 ; 0000 0052         case '+':
00011f 32eb      	CPI  R30,LOW(0x2B)
000120 e0a0      	LDI  R26,HIGH(0x2B)
000121 07fa      	CPC  R31,R26
000122 f429      	BRNE _0x40
                 ; 0000 0053             return first_operand+second_operand;
000123 940e 0421 	CALL SUBOPT_0x3
000125 940e 0472 	CALL __ADDD12
000127 9508      	RET
                 ; 0000 0054         case '-':
                 _0x40:
000128 32ed      	CPI  R30,LOW(0x2D)
000129 e0a0      	LDI  R26,HIGH(0x2D)
00012a 07fa      	CPC  R31,R26
00012b f469      	BRNE _0x41
                 ; 0000 0055             return first_operand-second_operand;
00012c 91a0 0264 	LDS  R26,_second_operand
00012e 91b0 0265 	LDS  R27,_second_operand+1
000130 9180 0266 	LDS  R24,_second_operand+2
000132 9190 0267 	LDS  R25,_second_operand+3
000134 940e 0400 	CALL SUBOPT_0x0
000136 940e 0477 	CALL __SUBD12
000138 9508      	RET
                 ; 0000 0056         case '*':
                 _0x41:
000139 32ea      	CPI  R30,LOW(0x2A)
00013a e0a0      	LDI  R26,HIGH(0x2A)
00013b 07fa      	CPC  R31,R26
00013c f429      	BRNE _0x42
                 ; 0000 0057             return first_operand*second_operand;
00013d 940e 0421 	CALL SUBOPT_0x3
00013f 940e 04ad 	CALL __MULD12
000141 9508      	RET
                 ; 0000 0058         case '/':
                 _0x42:
000142 32ef      	CPI  R30,LOW(0x2F)
000143 e0a0      	LDI  R26,HIGH(0x2F)
000144 07fa      	CPC  R31,R26
000145 f429      	BRNE _0x3F
                 ; 0000 0059             return first_operand/second_operand;
000146 940e 0421 	CALL SUBOPT_0x3
000148 940e 04d7 	CALL __DIVD21
00014a 9508      	RET
                 ; 0000 005A     }
                 _0x3F:
                 ; 0000 005B  }
00014b 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;// #define Max_Digits 10
                 ;void show_result_on_lcd(){
                 ; 0000 005F void show_result_on_lcd(){
                 _show_result_on_lcd:
                 ; .FSTART _show_result_on_lcd
                 ; 0000 0060        long int result = calculate_result();
                 ; 0000 0061 
                 ; 0000 0062        char str[256];
                 ; 0000 0063 
                 ; 0000 0064        sprintf(str, "%d", result);
00014c 9724      	SBIW R28,4
00014d 50d1      	SUBI R29,1
                 ;	result -> Y+256
                 ;	str -> Y+0
00014e dfce      	RCALL _calculate_result
                +
00014f 01de     +MOVW R26 , R28
000150 50a0     +SUBI R26 , LOW ( - 256 )
000151 4fbf     +SBCI R27 , HIGH ( - 256 )
000152 93ed     +ST X + , R30
000153 93fd     +ST X + , R31
000154 936d     +ST X + , R22
000155 937c     +ST X , R23
                 	__PUTD1SX 256
000156 01fe      	MOVW R30,R28
000157 93fa      	ST   -Y,R31
000158 93ea      	ST   -Y,R30
                +
000159 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00015a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00015b 93fa      	ST   -Y,R31
00015c 93ea      	ST   -Y,R30
                +
00015d 01fe     +MOVW R30 , R28
00015e 5fec     +SUBI R30 , LOW ( - 260 )
00015f 4ffe     +SBCI R31 , HIGH ( - 260 )
000160 9001     +LD R0 , Z +
000161 9011     +LD R1 , Z +
000162 9161     +LD R22 , Z +
000163 8170     +LD R23 , Z
000164 01f0     +MOVW R30 , R0
                 	__GETD1SX 260
000165 940e 04f7 	CALL __PUTPARD1
000167 e084      	LDI  R24,4
000168 940e 03b3 	CALL _sprintf
00016a 9628      	ADIW R28,8
                 ; 0000 0065 
                 ; 0000 0066        lcd_puts(str);
00016b 01de      	MOVW R26,R28
00016c d094      	RCALL _lcd_puts
                 ; 0000 0067 }
00016d 9624      	ADIW R28,4
00016e 5fdf      	SUBI R29,-1
00016f 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void reset() {
                 ; 0000 006A void reset() {
                 _reset:
                 ; .FSTART _reset
                 ; 0000 006B     lcd_clear();
000170 d06f      	RCALL _lcd_clear
                 ; 0000 006C     first_operand=0;
000171 e0e0      	LDI  R30,LOW(0)
000172 93e0 0260 	STS  _first_operand,R30
000174 93e0 0261 	STS  _first_operand+1,R30
000176 93e0 0262 	STS  _first_operand+2,R30
000178 93e0 0263 	STS  _first_operand+3,R30
                 ; 0000 006D     second_operand=0;
00017a 93e0 0264 	STS  _second_operand,R30
00017c 93e0 0265 	STS  _second_operand+1,R30
00017e 93e0 0266 	STS  _second_operand+2,R30
000180 93e0 0267 	STS  _second_operand+3,R30
                 ; 0000 006E     operator='0';
000182 e3e0      	LDI  R30,LOW(48)
000183 2e5e      	MOV  R5,R30
                 ; 0000 006F }
000184 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void){
                 ; 0000 0072 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 0073 
                 ; 0000 0074     DDRD=0xf0;
000185 efe0      	LDI  R30,LOW(240)
000186 bbe1      	OUT  0x11,R30
                 ; 0000 0075     PORTD=0x00;
000187 e0e0      	LDI  R30,LOW(0)
000188 bbe2      	OUT  0x12,R30
                 ; 0000 0076 
                 ; 0000 0077     //intit lcd
                 ; 0000 0078     lcd_init(16);
000189 e1a0      	LDI  R26,LOW(16)
00018a d087      	RCALL _lcd_init
                 ; 0000 0079     reset();
00018b dfe4      	RCALL _reset
                 ; 0000 007A 
                 ; 0000 007B 
                 ; 0000 007C     while (1){
                 _0x44:
                 ; 0000 007D         int button=0;
                 ; 0000 007E 
                 ; 0000 007F         while(button != 11){
00018c 9722      	SBIW R28,2
00018d e0e0      	LDI  R30,LOW(0)
00018e 83e8      	ST   Y,R30
00018f 83e9      	STD  Y+1,R30
                 ;	button -> Y+0
                 _0x47:
000190 81a8      	LD   R26,Y
000191 81b9      	LDD  R27,Y+1
000192 971b      	SBIW R26,11
000193 f0b9      	BREQ _0x49
                 ; 0000 0080             button=check_button();
000194 dedb      	RCALL _check_button
000195 83e8      	ST   Y,R30
000196 83f9      	STD  Y+1,R31
                 ; 0000 0081 
                 ; 0000 0082             if(button != 10 && button !=11){
000197 81a8      	LD   R26,Y
000198 81b9      	LDD  R27,Y+1
000199 971a      	SBIW R26,10
00019a f021      	BREQ _0x4B
00019b 81a8      	LD   R26,Y
00019c 81b9      	LDD  R27,Y+1
00019d 971b      	SBIW R26,11
00019e f409      	BRNE _0x4C
                 _0x4B:
00019f c004      	RJMP _0x4A
                 _0x4C:
                 ; 0000 0083                 show_input(button);
0001a0 81a8      	LD   R26,Y
0001a1 81b9      	LDD  R27,Y+1
0001a2 df2e      	RCALL _show_input
                 ; 0000 0084             } else if(button == 10){
0001a3 c006      	RJMP _0x4D
                 _0x4A:
0001a4 81a8      	LD   R26,Y
0001a5 81b9      	LDD  R27,Y+1
0001a6 971a      	SBIW R26,10
0001a7 f411      	BRNE _0x4E
                 ; 0000 0085                 reset();
0001a8 dfc7      	RCALL _reset
                 ; 0000 0086                 continue;
0001a9 cfe6      	RJMP _0x47
                 ; 0000 0087             }
                 ; 0000 0088         }
                 _0x4E:
                 _0x4D:
0001aa cfe5      	RJMP _0x47
                 _0x49:
                 ; 0000 0089         lcd_putchar('=');
0001ab e3ad      	LDI  R26,LOW(61)
0001ac d03f      	RCALL _lcd_putchar
                 ; 0000 008A         show_result_on_lcd();
0001ad df9e      	RCALL _show_result_on_lcd
                 ; 0000 008B 
                 ; 0000 008C         check_button();
0001ae dec1      	RCALL _check_button
                 ; 0000 008D         reset();
0001af dfc0      	RCALL _reset
                 ; 0000 008E     }
0001b0 9622      	ADIW R28,2
0001b1 cfda      	RJMP _0x44
                 ; 0000 008F }
                 _0x4F:
0001b2 cfff      	RJMP _0x4F
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001b3 93aa      	ST   -Y,R26
0001b4 b3e5      	IN   R30,0x15
0001b5 70ef      	ANDI R30,LOW(0xF)
0001b6 2fae      	MOV  R26,R30
0001b7 81e8      	LD   R30,Y
0001b8 7fe0      	ANDI R30,LOW(0xF0)
0001b9 2bea      	OR   R30,R26
0001ba bbe5      	OUT  0x15,R30
                +
0001bb e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001bc 958a     +DEC R24
0001bd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001be 9aaa      	SBI  0x15,2
                +
0001bf e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001c0 958a     +DEC R24
0001c1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001c2 98aa      	CBI  0x15,2
                +
0001c3 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001c4 958a     +DEC R24
0001c5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001c6 c076      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001c7 93aa      	ST   -Y,R26
0001c8 81a8      	LD   R26,Y
0001c9 dfe9      	RCALL __lcd_write_nibble_G100
0001ca 81e8          ld    r30,y
0001cb 95e2          swap  r30
0001cc 83e8          st    y,r30
0001cd 81a8      	LD   R26,Y
0001ce dfe4      	RCALL __lcd_write_nibble_G100
                +
0001cf e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001d0 958a     +DEC R24
0001d1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001d2 c06a      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001d3 93aa      	ST   -Y,R26
0001d4 81e8      	LD   R30,Y
0001d5 e0f0      	LDI  R31,0
0001d6 59e8      	SUBI R30,LOW(-__base_y_G100)
0001d7 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001d8 81e0      	LD   R30,Z
0001d9 81a9      	LDD  R26,Y+1
0001da 0fae      	ADD  R26,R30
0001db dfeb      	RCALL __lcd_write_data
0001dc 8049      	LDD  R4,Y+1
0001dd 8078      	LDD  R7,Y+0
0001de 9622      	ADIW R28,2
0001df 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001e0 e0a2      	LDI  R26,LOW(2)
0001e1 940e 042b 	CALL SUBOPT_0x4
0001e3 e0ac      	LDI  R26,LOW(12)
0001e4 dfe2      	RCALL __lcd_write_data
0001e5 e0a1      	LDI  R26,LOW(1)
0001e6 940e 042b 	CALL SUBOPT_0x4
0001e8 e0e0      	LDI  R30,LOW(0)
0001e9 2e7e      	MOV  R7,R30
0001ea 2e4e      	MOV  R4,R30
0001eb 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001ec 93aa      	ST   -Y,R26
0001ed 81a8      	LD   R26,Y
0001ee 30aa      	CPI  R26,LOW(0xA)
0001ef f011      	BREQ _0x2000005
0001f0 1446      	CP   R4,R6
0001f1 f048      	BRLO _0x2000004
                 _0x2000005:
0001f2 e0e0      	LDI  R30,LOW(0)
0001f3 93ea      	ST   -Y,R30
0001f4 9473      	INC  R7
0001f5 2da7      	MOV  R26,R7
0001f6 dfdc      	RCALL _lcd_gotoxy
0001f7 81a8      	LD   R26,Y
0001f8 30aa      	CPI  R26,LOW(0xA)
0001f9 f409      	BRNE _0x2000007
0001fa c042      	RJMP _0x20C0002
                 _0x2000007:
                 _0x2000004:
0001fb 9443      	INC  R4
0001fc 9aa8      	SBI  0x15,0
0001fd 81a8      	LD   R26,Y
0001fe dfc8      	RCALL __lcd_write_data
0001ff 98a8      	CBI  0x15,0
000200 c03c      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000201 93ba      	ST   -Y,R27
000202 93aa      	ST   -Y,R26
000203 931a      	ST   -Y,R17
                 _0x2000008:
000204 81a9      	LDD  R26,Y+1
000205 81ba      	LDD  R27,Y+1+1
000206 91ed      	LD   R30,X+
000207 83a9      	STD  Y+1,R26
000208 83ba      	STD  Y+1+1,R27
000209 2f1e      	MOV  R17,R30
00020a 30e0      	CPI  R30,0
00020b f019      	BREQ _0x200000A
00020c 2fa1      	MOV  R26,R17
00020d dfde      	RCALL _lcd_putchar
00020e cff5      	RJMP _0x2000008
                 _0x200000A:
                 _0x20C0003:
00020f 8118      	LDD  R17,Y+0
000210 9623      	ADIW R28,3
000211 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000212 93aa      	ST   -Y,R26
000213 b3e4      	IN   R30,0x14
000214 6fe0      	ORI  R30,LOW(0xF0)
000215 bbe4      	OUT  0x14,R30
000216 9aa2      	SBI  0x14,2
000217 9aa0      	SBI  0x14,0
000218 9aa1      	SBI  0x14,1
000219 98aa      	CBI  0x15,2
00021a 98a8      	CBI  0x15,0
00021b 98a9      	CBI  0x15,1
00021c 8068      	LDD  R6,Y+0
00021d 81e8      	LD   R30,Y
00021e 58e0      	SUBI R30,-LOW(128)
                +
00021f 93e0 026a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000221 81e8      	LD   R30,Y
000222 54e0      	SUBI R30,-LOW(192)
                +
000223 93e0 026b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000225 e1a4      	LDI  R26,LOW(20)
000226 e0b0      	LDI  R27,0
000227 940e 0464 	CALL _delay_ms
000229 940e 0431 	CALL SUBOPT_0x5
00022b 940e 0431 	CALL SUBOPT_0x5
00022d 940e 0431 	CALL SUBOPT_0x5
00022f e2a0      	LDI  R26,LOW(32)
000230 df82      	RCALL __lcd_write_nibble_G100
                +
000231 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000232 958a     +DEC R24
000233 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000234 e2a8      	LDI  R26,LOW(40)
000235 df91      	RCALL __lcd_write_data
000236 e0a4      	LDI  R26,LOW(4)
000237 df8f      	RCALL __lcd_write_data
000238 e8a5      	LDI  R26,LOW(133)
000239 df8d      	RCALL __lcd_write_data
00023a e0a6      	LDI  R26,LOW(6)
00023b df8b      	RCALL __lcd_write_data
00023c dfa3      	RCALL _lcd_clear
                 _0x20C0002:
00023d 9621      	ADIW R28,1
00023e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G103:
                 ; .FSTART _put_buff_G103
00023f 93ba      	ST   -Y,R27
000240 93aa      	ST   -Y,R26
000241 931a      	ST   -Y,R17
000242 930a      	ST   -Y,R16
000243 81aa      	LDD  R26,Y+2
000244 81bb      	LDD  R27,Y+2+1
000245 9612      	ADIW R26,2
000246 940e 04ef 	CALL __GETW1P
000248 9730      	SBIW R30,0
000249 f159      	BREQ _0x2060010
00024a 81aa      	LDD  R26,Y+2
00024b 81bb      	LDD  R27,Y+2+1
00024c 9614      	ADIW R26,4
00024d 940e 04ef 	CALL __GETW1P
00024f 018f      	MOVW R16,R30
000250 9730      	SBIW R30,0
000251 f061      	BREQ _0x2060012
                +
000252 3002     +CPI R16 , LOW ( 2 )
000253 e0e0     +LDI R30 , HIGH ( 2 )
000254 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000255 f098      	BRLO _0x2060013
000256 01f8      	MOVW R30,R16
000257 9731      	SBIW R30,1
000258 018f      	MOVW R16,R30
                +
000259 81aa     +LDD R26 , Y + 2
00025a 81bb     +LDD R27 , Y + 2 + 1
00025b 9614     +ADIW R26 , 4
00025c 93ed     +ST X + , R30
00025d 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2060012:
00025e 81aa      	LDD  R26,Y+2
00025f 81bb      	LDD  R27,Y+2+1
000260 9612      	ADIW R26,2
000261 91ed      	LD   R30,X+
000262 91fd      	LD   R31,X+
000263 9631      	ADIW R30,1
000264 93fe      	ST   -X,R31
000265 93ee      	ST   -X,R30
000266 9731      	SBIW R30,1
000267 81ac      	LDD  R26,Y+4
000268 83a0      	STD  Z+0,R26
                 _0x2060013:
000269 81aa      	LDD  R26,Y+2
00026a 81bb      	LDD  R27,Y+2+1
00026b 940e 04ef 	CALL __GETW1P
00026d 23ff      	TST  R31
00026e f02a      	BRMI _0x2060014
00026f 91ed      	LD   R30,X+
000270 91fd      	LD   R31,X+
000271 9631      	ADIW R30,1
000272 93fe      	ST   -X,R31
000273 93ee      	ST   -X,R30
                 _0x2060014:
000274 c006      	RJMP _0x2060015
                 _0x2060010:
000275 81aa      	LDD  R26,Y+2
000276 81bb      	LDD  R27,Y+2+1
000277 efef      	LDI  R30,LOW(65535)
000278 efff      	LDI  R31,HIGH(65535)
000279 93ed      	ST   X+,R30
00027a 93fc      	ST   X,R31
                 _0x2060015:
00027b 8119      	LDD  R17,Y+1
00027c 8108      	LDD  R16,Y+0
00027d 9625      	ADIW R28,5
00027e 9508      	RET
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
00027f 93ba      	ST   -Y,R27
000280 93aa      	ST   -Y,R26
000281 9726      	SBIW R28,6
000282 940e 04fc 	CALL __SAVELOCR6
000284 e010      	LDI  R17,0
000285 85ac      	LDD  R26,Y+12
000286 85bd      	LDD  R27,Y+12+1
000287 e0e0      	LDI  R30,LOW(0)
000288 e0f0      	LDI  R31,HIGH(0)
000289 93ed      	ST   X+,R30
00028a 93fc      	ST   X,R31
                 _0x2060016:
00028b 89ea      	LDD  R30,Y+18
00028c 89fb      	LDD  R31,Y+18+1
00028d 9631      	ADIW R30,1
00028e 8bea      	STD  Y+18,R30
00028f 8bfb      	STD  Y+18+1,R31
000290 9731      	SBIW R30,1
000291 91e4      	LPM  R30,Z
000292 2f2e      	MOV  R18,R30
000293 30e0      	CPI  R30,0
000294 f409      	BRNE PC+2
000295 c115      	RJMP _0x2060018
000296 2fe1      	MOV  R30,R17
000297 30e0      	CPI  R30,0
000298 f439      	BRNE _0x206001C
000299 3225      	CPI  R18,37
00029a f411      	BRNE _0x206001D
00029b e011      	LDI  R17,LOW(1)
00029c c002      	RJMP _0x206001E
                 _0x206001D:
00029d 940e 0438 	CALL SUBOPT_0x6
                 _0x206001E:
00029f c10a      	RJMP _0x206001B
                 _0x206001C:
0002a0 30e1      	CPI  R30,LOW(0x1)
0002a1 f4a9      	BRNE _0x206001F
0002a2 3225      	CPI  R18,37
0002a3 f419      	BRNE _0x2060020
0002a4 940e 0438 	CALL SUBOPT_0x6
0002a6 c102      	RJMP _0x20600CC
                 _0x2060020:
0002a7 e012      	LDI  R17,LOW(2)
0002a8 e040      	LDI  R20,LOW(0)
0002a9 e000      	LDI  R16,LOW(0)
0002aa 322d      	CPI  R18,45
0002ab f411      	BRNE _0x2060021
0002ac e001      	LDI  R16,LOW(1)
0002ad c0fc      	RJMP _0x206001B
                 _0x2060021:
0002ae 322b      	CPI  R18,43
0002af f411      	BRNE _0x2060022
0002b0 e24b      	LDI  R20,LOW(43)
0002b1 c0f8      	RJMP _0x206001B
                 _0x2060022:
0002b2 3220      	CPI  R18,32
0002b3 f411      	BRNE _0x2060023
0002b4 e240      	LDI  R20,LOW(32)
0002b5 c0f4      	RJMP _0x206001B
                 _0x2060023:
0002b6 c002      	RJMP _0x2060024
                 _0x206001F:
0002b7 30e2      	CPI  R30,LOW(0x2)
0002b8 f439      	BRNE _0x2060025
                 _0x2060024:
0002b9 e050      	LDI  R21,LOW(0)
0002ba e013      	LDI  R17,LOW(3)
0002bb 3320      	CPI  R18,48
0002bc f411      	BRNE _0x2060026
0002bd 6800      	ORI  R16,LOW(128)
0002be c0eb      	RJMP _0x206001B
                 _0x2060026:
0002bf c003      	RJMP _0x2060027
                 _0x2060025:
0002c0 30e3      	CPI  R30,LOW(0x3)
0002c1 f009      	BREQ PC+2
0002c2 c0e7      	RJMP _0x206001B
                 _0x2060027:
0002c3 3320      	CPI  R18,48
0002c4 f010      	BRLO _0x206002A
0002c5 332a      	CPI  R18,58
0002c6 f008      	BRLO _0x206002B
                 _0x206002A:
0002c7 c007      	RJMP _0x2060029
                 _0x206002B:
0002c8 e0aa      	LDI  R26,LOW(10)
0002c9 9f5a      	MUL  R21,R26
0002ca 2d50      	MOV  R21,R0
0002cb 2fe2      	MOV  R30,R18
0002cc 53e0      	SUBI R30,LOW(48)
0002cd 0f5e      	ADD  R21,R30
0002ce c0db      	RJMP _0x206001B
                 _0x2060029:
0002cf 2fe2      	MOV  R30,R18
0002d0 36e3      	CPI  R30,LOW(0x63)
0002d1 f449      	BRNE _0x206002F
0002d2 940e 043f 	CALL SUBOPT_0x7
0002d4 89e8      	LDD  R30,Y+16
0002d5 89f9      	LDD  R31,Y+16+1
0002d6 81a4      	LDD  R26,Z+4
0002d7 93aa      	ST   -Y,R26
0002d8 940e 0445 	CALL SUBOPT_0x8
0002da c0ce      	RJMP _0x2060030
                 _0x206002F:
0002db 37e3      	CPI  R30,LOW(0x73)
0002dc f441      	BRNE _0x2060032
0002dd 940e 043f 	CALL SUBOPT_0x7
0002df 940e 044b 	CALL SUBOPT_0x9
0002e1 940e 03e7 	CALL _strlen
0002e3 2f1e      	MOV  R17,R30
0002e4 c00a      	RJMP _0x2060033
                 _0x2060032:
0002e5 37e0      	CPI  R30,LOW(0x70)
0002e6 f461      	BRNE _0x2060035
0002e7 940e 043f 	CALL SUBOPT_0x7
0002e9 940e 044b 	CALL SUBOPT_0x9
0002eb 940e 03f3 	CALL _strlenf
0002ed 2f1e      	MOV  R17,R30
0002ee 6008      	ORI  R16,LOW(8)
                 _0x2060033:
0002ef 6002      	ORI  R16,LOW(2)
0002f0 770f      	ANDI R16,LOW(127)
0002f1 e030      	LDI  R19,LOW(0)
0002f2 c034      	RJMP _0x2060036
                 _0x2060035:
0002f3 36e4      	CPI  R30,LOW(0x64)
0002f4 f011      	BREQ _0x2060039
0002f5 36e9      	CPI  R30,LOW(0x69)
0002f6 f411      	BRNE _0x206003A
                 _0x2060039:
0002f7 6004      	ORI  R16,LOW(4)
0002f8 c002      	RJMP _0x206003B
                 _0x206003A:
0002f9 37e5      	CPI  R30,LOW(0x75)
0002fa f431      	BRNE _0x206003C
                 _0x206003B:
0002fb e5e4      	LDI  R30,LOW(_tbl10_G103*2)
0002fc e0f0      	LDI  R31,HIGH(_tbl10_G103*2)
0002fd 83ee      	STD  Y+6,R30
0002fe 83ff      	STD  Y+6+1,R31
0002ff e015      	LDI  R17,LOW(5)
000300 c00c      	RJMP _0x206003D
                 _0x206003C:
000301 35e8      	CPI  R30,LOW(0x58)
000302 f411      	BRNE _0x206003F
000303 6008      	ORI  R16,LOW(8)
000304 c003      	RJMP _0x2060040
                 _0x206003F:
000305 37e8      	CPI  R30,LOW(0x78)
000306 f009      	BREQ PC+2
000307 c0a1      	RJMP _0x2060071
                 _0x2060040:
000308 e5ee      	LDI  R30,LOW(_tbl16_G103*2)
000309 e0f0      	LDI  R31,HIGH(_tbl16_G103*2)
00030a 83ee      	STD  Y+6,R30
00030b 83ff      	STD  Y+6+1,R31
00030c e014      	LDI  R17,LOW(4)
                 _0x206003D:
00030d ff02      	SBRS R16,2
00030e c014      	RJMP _0x2060042
00030f 940e 043f 	CALL SUBOPT_0x7
000311 940e 0455 	CALL SUBOPT_0xA
000313 85ab      	LDD  R26,Y+11
000314 23aa      	TST  R26
000315 f43a      	BRPL _0x2060043
000316 85ea      	LDD  R30,Y+10
000317 85fb      	LDD  R31,Y+10+1
000318 940e 047c 	CALL __ANEGW1
00031a 87ea      	STD  Y+10,R30
00031b 87fb      	STD  Y+10+1,R31
00031c e24d      	LDI  R20,LOW(45)
                 _0x2060043:
00031d 3040      	CPI  R20,0
00031e f011      	BREQ _0x2060044
00031f 5f1f      	SUBI R17,-LOW(1)
000320 c001      	RJMP _0x2060045
                 _0x2060044:
000321 7f0b      	ANDI R16,LOW(251)
                 _0x2060045:
000322 c004      	RJMP _0x2060046
                 _0x2060042:
000323 940e 043f 	CALL SUBOPT_0x7
000325 940e 0455 	CALL SUBOPT_0xA
                 _0x2060046:
                 _0x2060036:
000327 fd00      	SBRC R16,0
000328 c011      	RJMP _0x2060047
                 _0x2060048:
000329 1715      	CP   R17,R21
00032a f478      	BRSH _0x206004A
00032b ff07      	SBRS R16,7
00032c c008      	RJMP _0x206004B
00032d ff02      	SBRS R16,2
00032e c004      	RJMP _0x206004C
00032f 7f0b      	ANDI R16,LOW(251)
000330 2f24      	MOV  R18,R20
000331 5011      	SUBI R17,LOW(1)
000332 c001      	RJMP _0x206004D
                 _0x206004C:
000333 e320      	LDI  R18,LOW(48)
                 _0x206004D:
000334 c001      	RJMP _0x206004E
                 _0x206004B:
000335 e220      	LDI  R18,LOW(32)
                 _0x206004E:
000336 940e 0438 	CALL SUBOPT_0x6
000338 5051      	SUBI R21,LOW(1)
000339 cfef      	RJMP _0x2060048
                 _0x206004A:
                 _0x2060047:
00033a 2f31      	MOV  R19,R17
00033b ff01      	SBRS R16,1
00033c c017      	RJMP _0x206004F
                 _0x2060050:
00033d 3030      	CPI  R19,0
00033e f0a1      	BREQ _0x2060052
00033f ff03      	SBRS R16,3
000340 c006      	RJMP _0x2060053
000341 81ee      	LDD  R30,Y+6
000342 81ff      	LDD  R31,Y+6+1
000343 9125      	LPM  R18,Z+
000344 83ee      	STD  Y+6,R30
000345 83ff      	STD  Y+6+1,R31
000346 c005      	RJMP _0x2060054
                 _0x2060053:
000347 81ae      	LDD  R26,Y+6
000348 81bf      	LDD  R27,Y+6+1
000349 912d      	LD   R18,X+
00034a 83ae      	STD  Y+6,R26
00034b 83bf      	STD  Y+6+1,R27
                 _0x2060054:
00034c 940e 0438 	CALL SUBOPT_0x6
00034e 3050      	CPI  R21,0
00034f f009      	BREQ _0x2060055
000350 5051      	SUBI R21,LOW(1)
                 _0x2060055:
000351 5031      	SUBI R19,LOW(1)
000352 cfea      	RJMP _0x2060050
                 _0x2060052:
000353 c04b      	RJMP _0x2060056
                 _0x206004F:
                 _0x2060058:
000354 e320      	LDI  R18,LOW(48)
000355 81ee      	LDD  R30,Y+6
000356 81ff      	LDD  R31,Y+6+1
000357 940e 04f3 	CALL __GETW1PF
000359 87e8      	STD  Y+8,R30
00035a 87f9      	STD  Y+8+1,R31
00035b 81ee      	LDD  R30,Y+6
00035c 81ff      	LDD  R31,Y+6+1
00035d 9632      	ADIW R30,2
00035e 83ee      	STD  Y+6,R30
00035f 83ff      	STD  Y+6+1,R31
                 _0x206005A:
000360 85e8      	LDD  R30,Y+8
000361 85f9      	LDD  R31,Y+8+1
000362 85aa      	LDD  R26,Y+10
000363 85bb      	LDD  R27,Y+10+1
000364 17ae      	CP   R26,R30
000365 07bf      	CPC  R27,R31
000366 f050      	BRLO _0x206005C
000367 5f2f      	SUBI R18,-LOW(1)
000368 85a8      	LDD  R26,Y+8
000369 85b9      	LDD  R27,Y+8+1
00036a 85ea      	LDD  R30,Y+10
00036b 85fb      	LDD  R31,Y+10+1
00036c 1bea      	SUB  R30,R26
00036d 0bfb      	SBC  R31,R27
00036e 87ea      	STD  Y+10,R30
00036f 87fb      	STD  Y+10+1,R31
000370 cfef      	RJMP _0x206005A
                 _0x206005C:
000371 332a      	CPI  R18,58
000372 f028      	BRLO _0x206005D
000373 ff03      	SBRS R16,3
000374 c002      	RJMP _0x206005E
000375 5f29      	SUBI R18,-LOW(7)
000376 c001      	RJMP _0x206005F
                 _0x206005E:
000377 5d29      	SUBI R18,-LOW(39)
                 _0x206005F:
                 _0x206005D:
000378 fd04      	SBRC R16,4
000379 c01a      	RJMP _0x2060061
00037a 3321      	CPI  R18,49
00037b f420      	BRSH _0x2060063
00037c 85a8      	LDD  R26,Y+8
00037d 85b9      	LDD  R27,Y+8+1
00037e 9711      	SBIW R26,1
00037f f409      	BRNE _0x2060062
                 _0x2060063:
000380 c009      	RJMP _0x20600CD
                 _0x2060062:
000381 1753      	CP   R21,R19
000382 f010      	BRLO _0x2060067
000383 ff00      	SBRS R16,0
000384 c001      	RJMP _0x2060068
                 _0x2060067:
000385 c013      	RJMP _0x2060066
                 _0x2060068:
000386 e220      	LDI  R18,LOW(32)
000387 ff07      	SBRS R16,7
000388 c00b      	RJMP _0x2060069
000389 e320      	LDI  R18,LOW(48)
                 _0x20600CD:
00038a 6100      	ORI  R16,LOW(16)
00038b ff02      	SBRS R16,2
00038c c007      	RJMP _0x206006A
00038d 7f0b      	ANDI R16,LOW(251)
00038e 934a      	ST   -Y,R20
00038f 940e 0445 	CALL SUBOPT_0x8
000391 3050      	CPI  R21,0
000392 f009      	BREQ _0x206006B
000393 5051      	SUBI R21,LOW(1)
                 _0x206006B:
                 _0x206006A:
                 _0x2060069:
                 _0x2060061:
000394 940e 0438 	CALL SUBOPT_0x6
000396 3050      	CPI  R21,0
000397 f009      	BREQ _0x206006C
000398 5051      	SUBI R21,LOW(1)
                 _0x206006C:
                 _0x2060066:
000399 5031      	SUBI R19,LOW(1)
00039a 85a8      	LDD  R26,Y+8
00039b 85b9      	LDD  R27,Y+8+1
00039c 9712      	SBIW R26,2
00039d f008      	BRLO _0x2060059
00039e cfb5      	RJMP _0x2060058
                 _0x2060059:
                 _0x2060056:
00039f ff00      	SBRS R16,0
0003a0 c008      	RJMP _0x206006D
                 _0x206006E:
0003a1 3050      	CPI  R21,0
0003a2 f031      	BREQ _0x2060070
0003a3 5051      	SUBI R21,LOW(1)
0003a4 e2e0      	LDI  R30,LOW(32)
0003a5 93ea      	ST   -Y,R30
0003a6 940e 0445 	CALL SUBOPT_0x8
0003a8 cff8      	RJMP _0x206006E
                 _0x2060070:
                 _0x206006D:
                 _0x2060071:
                 _0x2060030:
                 _0x20600CC:
0003a9 e010      	LDI  R17,LOW(0)
                 _0x206001B:
0003aa cee0      	RJMP _0x2060016
                 _0x2060018:
0003ab 85ac      	LDD  R26,Y+12
0003ac 85bd      	LDD  R27,Y+12+1
0003ad 940e 04ef 	CALL __GETW1P
0003af 940e 0503 	CALL __LOADLOCR6
0003b1 9664      	ADIW R28,20
0003b2 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003b3 92ff      	PUSH R15
0003b4 2ef8      	MOV  R15,R24
0003b5 9726      	SBIW R28,6
0003b6 940e 04fe 	CALL __SAVELOCR4
0003b8 940e 045d 	CALL SUBOPT_0xB
0003ba 9730      	SBIW R30,0
0003bb f419      	BRNE _0x2060072
0003bc efef      	LDI  R30,LOW(65535)
0003bd efff      	LDI  R31,HIGH(65535)
0003be c023      	RJMP _0x20C0001
                 _0x2060072:
0003bf 01de      	MOVW R26,R28
0003c0 9616      	ADIW R26,6
0003c1 940e 046e 	CALL __ADDW2R15
0003c3 018d      	MOVW R16,R26
0003c4 940e 045d 	CALL SUBOPT_0xB
0003c6 83ee      	STD  Y+6,R30
0003c7 83ff      	STD  Y+6+1,R31
0003c8 e0e0      	LDI  R30,LOW(0)
0003c9 87e8      	STD  Y+8,R30
0003ca 87e9      	STD  Y+8+1,R30
0003cb 01de      	MOVW R26,R28
0003cc 961a      	ADIW R26,10
0003cd 940e 046e 	CALL __ADDW2R15
0003cf 940e 04ef 	CALL __GETW1P
0003d1 93fa      	ST   -Y,R31
0003d2 93ea      	ST   -Y,R30
0003d3 931a      	ST   -Y,R17
0003d4 930a      	ST   -Y,R16
0003d5 e3ef      	LDI  R30,LOW(_put_buff_G103)
0003d6 e0f2      	LDI  R31,HIGH(_put_buff_G103)
0003d7 93fa      	ST   -Y,R31
0003d8 93ea      	ST   -Y,R30
0003d9 01de      	MOVW R26,R28
0003da 961a      	ADIW R26,10
0003db dea3      	RCALL __print_G103
0003dc 019f      	MOVW R18,R30
0003dd 81ae      	LDD  R26,Y+6
0003de 81bf      	LDD  R27,Y+6+1
0003df e0e0      	LDI  R30,LOW(0)
0003e0 93ec      	ST   X,R30
0003e1 01f9      	MOVW R30,R18
                 _0x20C0001:
0003e2 940e 0505 	CALL __LOADLOCR4
0003e4 962a      	ADIW R28,10
0003e5 90ff      	POP  R15
0003e6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003e7 93ba      	ST   -Y,R27
0003e8 93aa      	ST   -Y,R26
0003e9 91a9          ld   r26,y+
0003ea 91b9          ld   r27,y+
0003eb 27ee          clr  r30
0003ec 27ff          clr  r31
                 strlen0:
0003ed 916d          ld   r22,x+
0003ee 2366          tst  r22
0003ef f011          breq strlen1
0003f0 9631          adiw r30,1
0003f1 cffb          rjmp strlen0
                 strlen1:
0003f2 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003f3 93ba      	ST   -Y,R27
0003f4 93aa      	ST   -Y,R26
0003f5 27aa          clr  r26
0003f6 27bb          clr  r27
0003f7 91e9          ld   r30,y+
0003f8 91f9          ld   r31,y+
                 strlenf0:
0003f9 9005      	lpm  r0,z+
0003fa 2000          tst  r0
0003fb f011          breq strlenf1
0003fc 9611          adiw r26,1
0003fd cffb          rjmp strlenf0
                 strlenf1:
0003fe 01fd          movw r30,r26
0003ff 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _first_operand:
000260           	.BYTE 0x4
                 _second_operand:
000264           	.BYTE 0x4
                 __base_y_G100:
000268           	.BYTE 0x4
                 __seed_G101:
00026c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000400 91e0 0260 	LDS  R30,_first_operand
000402 91f0 0261 	LDS  R31,_first_operand+1
000404 9160 0262 	LDS  R22,_first_operand+2
000406 9170 0263 	LDS  R23,_first_operand+3
000408 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
                +
000409 e0aa     +LDI R26 , LOW ( 0xA )
00040a e0b0     +LDI R27 , HIGH ( 0xA )
00040b e080     +LDI R24 , BYTE3 ( 0xA )
00040c e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
00040d 940e 04ad 	CALL __MULD12
00040f 01df      	MOVW R26,R30
000410 01cb      	MOVW R24,R22
000411 81e9      	LDD  R30,Y+1
000412 81fa      	LDD  R31,Y+1+1
000413 940e 0488 	CALL __CWD1
000415 940e 0472 	CALL __ADDD12
000417 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
000418 91e0 0264 	LDS  R30,_second_operand
00041a 91f0 0265 	LDS  R31,_second_operand+1
00041c 9160 0266 	LDS  R22,_second_operand+2
00041e 9170 0267 	LDS  R23,_second_operand+3
000420 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
000421 dff6      	RCALL SUBOPT_0x2
000422 91a0 0260 	LDS  R26,_first_operand
000424 91b0 0261 	LDS  R27,_first_operand+1
000426 9180 0262 	LDS  R24,_first_operand+2
000428 9190 0263 	LDS  R25,_first_operand+3
00042a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00042b 940e 01c7 	CALL __lcd_write_data
00042d e0a3      	LDI  R26,LOW(3)
00042e e0b0      	LDI  R27,0
00042f 940c 0464 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
000431 e3a0      	LDI  R26,LOW(48)
000432 940e 01b3 	CALL __lcd_write_nibble_G100
                +
000434 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000435 958a     +DEC R24
000436 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000437 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
000438 932a      	ST   -Y,R18
000439 85ad      	LDD  R26,Y+13
00043a 85be      	LDD  R27,Y+13+1
00043b 85ef      	LDD  R30,Y+15
00043c 89f8      	LDD  R31,Y+15+1
00043d 9509      	ICALL
00043e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
00043f 89e8      	LDD  R30,Y+16
000440 89f9      	LDD  R31,Y+16+1
000441 9734      	SBIW R30,4
000442 8be8      	STD  Y+16,R30
000443 8bf9      	STD  Y+16+1,R31
000444 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000445 85ad      	LDD  R26,Y+13
000446 85be      	LDD  R27,Y+13+1
000447 85ef      	LDD  R30,Y+15
000448 89f8      	LDD  R31,Y+15+1
000449 9509      	ICALL
00044a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
00044b 89a8      	LDD  R26,Y+16
00044c 89b9      	LDD  R27,Y+16+1
00044d 9614      	ADIW R26,4
00044e 940e 04ef 	CALL __GETW1P
000450 83ee      	STD  Y+6,R30
000451 83ff      	STD  Y+6+1,R31
000452 81ae      	LDD  R26,Y+6
000453 81bf      	LDD  R27,Y+6+1
000454 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000455 89a8      	LDD  R26,Y+16
000456 89b9      	LDD  R27,Y+16+1
000457 9614      	ADIW R26,4
000458 940e 04ef 	CALL __GETW1P
00045a 87ea      	STD  Y+10,R30
00045b 87fb      	STD  Y+10+1,R31
00045c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00045d 01de      	MOVW R26,R28
00045e 961c      	ADIW R26,12
00045f 940e 046e 	CALL __ADDW2R15
000461 940e 04ef 	CALL __GETW1P
000463 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000464 9610      	adiw r26,0
000465 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000466 ef8a     +LDI R24 , LOW ( 0xFA )
000467 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000468 9701     +SBIW R24 , 1
000469 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00046a 95a8      	wdr
00046b 9711      	sbiw r26,1
00046c f7c9      	brne __delay_ms0
                 __delay_ms1:
00046d 9508      	ret
                 
                 __ADDW2R15:
00046e 2400      	CLR  R0
00046f 0daf      	ADD  R26,R15
000470 1db0      	ADC  R27,R0
000471 9508      	RET
                 
                 __ADDD12:
000472 0fea      	ADD  R30,R26
000473 1ffb      	ADC  R31,R27
000474 1f68      	ADC  R22,R24
000475 1f79      	ADC  R23,R25
000476 9508      	RET
                 
                 __SUBD12:
000477 1bea      	SUB  R30,R26
000478 0bfb      	SBC  R31,R27
000479 0b68      	SBC  R22,R24
00047a 0b79      	SBC  R23,R25
00047b 9508      	RET
                 
                 __ANEGW1:
00047c 95f1      	NEG  R31
00047d 95e1      	NEG  R30
00047e 40f0      	SBCI R31,0
00047f 9508      	RET
                 
                 __ANEGD1:
000480 95f0      	COM  R31
000481 9560      	COM  R22
000482 9570      	COM  R23
000483 95e1      	NEG  R30
000484 4fff      	SBCI R31,-1
000485 4f6f      	SBCI R22,-1
000486 4f7f      	SBCI R23,-1
000487 9508      	RET
                 
                 __CWD1:
000488 2f6f      	MOV  R22,R31
000489 0f66      	ADD  R22,R22
00048a 0b66      	SBC  R22,R22
00048b 2f76      	MOV  R23,R22
00048c 9508      	RET
                 
                 __MULD12U:
00048d 9f7a      	MUL  R23,R26
00048e 2d70      	MOV  R23,R0
00048f 9f6b      	MUL  R22,R27
000490 0d70      	ADD  R23,R0
000491 9ff8      	MUL  R31,R24
000492 0d70      	ADD  R23,R0
000493 9fe9      	MUL  R30,R25
000494 0d70      	ADD  R23,R0
000495 9f6a      	MUL  R22,R26
000496 2d60      	MOV  R22,R0
000497 0d71      	ADD  R23,R1
000498 9ffb      	MUL  R31,R27
000499 0d60      	ADD  R22,R0
00049a 1d71      	ADC  R23,R1
00049b 9fe8      	MUL  R30,R24
00049c 0d60      	ADD  R22,R0
00049d 1d71      	ADC  R23,R1
00049e 2788      	CLR  R24
00049f 9ffa      	MUL  R31,R26
0004a0 2df0      	MOV  R31,R0
0004a1 0d61      	ADD  R22,R1
0004a2 1f78      	ADC  R23,R24
0004a3 9feb      	MUL  R30,R27
0004a4 0df0      	ADD  R31,R0
0004a5 1d61      	ADC  R22,R1
0004a6 1f78      	ADC  R23,R24
0004a7 9fea      	MUL  R30,R26
0004a8 2de0      	MOV  R30,R0
0004a9 0df1      	ADD  R31,R1
0004aa 1f68      	ADC  R22,R24
0004ab 1f78      	ADC  R23,R24
0004ac 9508      	RET
                 
                 __MULD12:
0004ad d02e      	RCALL __CHKSIGND
0004ae dfde      	RCALL __MULD12U
0004af f40e      	BRTC __MULD121
0004b0 dfcf      	RCALL __ANEGD1
                 __MULD121:
0004b1 9508      	RET
                 
                 __DIVD21U:
0004b2 933f      	PUSH R19
0004b3 934f      	PUSH R20
0004b4 935f      	PUSH R21
0004b5 2400      	CLR  R0
0004b6 2411      	CLR  R1
0004b7 2744      	CLR  R20
0004b8 2755      	CLR  R21
0004b9 e230      	LDI  R19,32
                 __DIVD21U1:
0004ba 0faa      	LSL  R26
0004bb 1fbb      	ROL  R27
0004bc 1f88      	ROL  R24
0004bd 1f99      	ROL  R25
0004be 1c00      	ROL  R0
0004bf 1c11      	ROL  R1
0004c0 1f44      	ROL  R20
0004c1 1f55      	ROL  R21
0004c2 1a0e      	SUB  R0,R30
0004c3 0a1f      	SBC  R1,R31
0004c4 0b46      	SBC  R20,R22
0004c5 0b57      	SBC  R21,R23
0004c6 f428      	BRCC __DIVD21U2
0004c7 0e0e      	ADD  R0,R30
0004c8 1e1f      	ADC  R1,R31
0004c9 1f46      	ADC  R20,R22
0004ca 1f57      	ADC  R21,R23
0004cb c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0004cc 60a1      	SBR  R26,1
                 __DIVD21U3:
0004cd 953a      	DEC  R19
0004ce f759      	BRNE __DIVD21U1
0004cf 01fd      	MOVW R30,R26
0004d0 01bc      	MOVW R22,R24
0004d1 01d0      	MOVW R26,R0
0004d2 01ca      	MOVW R24,R20
0004d3 915f      	POP  R21
0004d4 914f      	POP  R20
0004d5 913f      	POP  R19
0004d6 9508      	RET
                 
                 __DIVD21:
0004d7 d004      	RCALL __CHKSIGND
0004d8 dfd9      	RCALL __DIVD21U
0004d9 f40e      	BRTC __DIVD211
0004da dfa5      	RCALL __ANEGD1
                 __DIVD211:
0004db 9508      	RET
                 
                 __CHKSIGND:
0004dc 94e8      	CLT
0004dd ff77      	SBRS R23,7
0004de c002      	RJMP __CHKSD1
0004df dfa0      	RCALL __ANEGD1
0004e0 9468      	SET
                 __CHKSD1:
0004e1 ff97      	SBRS R25,7
0004e2 c00b      	RJMP __CHKSD2
0004e3 2400      	CLR  R0
0004e4 95a0      	COM  R26
0004e5 95b0      	COM  R27
0004e6 9580      	COM  R24
0004e7 9590      	COM  R25
0004e8 9611      	ADIW R26,1
0004e9 1d80      	ADC  R24,R0
0004ea 1d90      	ADC  R25,R0
0004eb f800      	BLD  R0,0
0004ec 9403      	INC  R0
0004ed fa00      	BST  R0,0
                 __CHKSD2:
0004ee 9508      	RET
                 
                 __GETW1P:
0004ef 91ed      	LD   R30,X+
0004f0 91fc      	LD   R31,X
0004f1 9711      	SBIW R26,1
0004f2 9508      	RET
                 
                 __GETW1PF:
0004f3 9005      	LPM  R0,Z+
0004f4 91f4      	LPM  R31,Z
0004f5 2de0      	MOV  R30,R0
0004f6 9508      	RET
                 
                 __PUTPARD1:
0004f7 937a      	ST   -Y,R23
0004f8 936a      	ST   -Y,R22
0004f9 93fa      	ST   -Y,R31
0004fa 93ea      	ST   -Y,R30
0004fb 9508      	RET
                 
                 __SAVELOCR6:
0004fc 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004fd 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004fe 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004ff 932a      	ST   -Y,R18
                 __SAVELOCR2:
000500 931a      	ST   -Y,R17
000501 930a      	ST   -Y,R16
000502 9508      	RET
                 
                 __LOADLOCR6:
000503 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000504 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000505 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000506 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000507 8119      	LDD  R17,Y+1
000508 8108      	LD   R16,Y
000509 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  34 r1 :  12 r2 :   0 r3 :   0 r4 :   4 r5 :   5 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  34 r18:  29 r19:  12 r20:  16 r21:  23 r22:  33 r23:  26 
r24:  41 r25:  13 r26: 147 r27:  59 r28:  22 r29:   3 r30: 212 r31:  98 
x  :  27 y  : 196 z  :  19 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :  15 
adiw  :  27 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  20 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  43 brpl  :   2 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  64 
cbi   :  13 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   7 
cp    :   6 cpc   :   6 cpi   :  38 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  23 ld    :  34 ldd   :  96 ldi   : 134 
lds   :  16 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  28 movw  :  25 
mul   :  11 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   1 
ori   :   7 out   :  10 pop   :   4 push  :   4 rcall :  35 ret   :  60 
reti  :   0 rjmp  :  90 rol   :   7 ror   :   0 sbc   :   8 sbci  :   7 
sbi   :   9 sbic  :   0 sbis  :  16 sbiw  :  28 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  67 std   :  33 sts   :  18 sub   :   3 subi  :  21 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a14   2530     50   2580   32768   7.9%
[.dseg] 0x000060 0x000270      0     16     16    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
